import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pyplot as plt


def compare_results(l1, l2):
	return np.linalg.norm(l1 - l2), np.mean(l1 - l2), np.std(l1 - l2)

def cstm_autumn_r(x):
	return plt.cm.autumn_r(x)

if __name__ == "__main__":
	data_sphere = {
		(np.float64(0.0), np.float64(0.0)): np.array(
			[2.082313190897172, 1.4914261153250647, 1.3602493286048838,
			 2.5984162873609615, 2.2641204920409335, 2.3156831502627697,
			 1.8292395460476647], dtype=object
		),
		(np.float64(0.0), np.float64(0.31622776601683794)): np.array(
			[1.7506910433849456, 1.5565975381800636, 1.523760212155475,
			 1.6894891285446352, 2.3427720127985734, 1.5611496795644357,
			 1.6259139571911954], dtype=object
		),
		(np.float64(0.0), np.float64(0.6324555320336759)): np.array(
			[1.6740706461185344, 1.4313260204023823, 1.5579615852928883,
			 2.0769090034141, 2.0568552119500683, 1.7902834007037238,
			 2.1182412252701277], dtype=object
		),
		(np.float64(0.0), np.float64(0.9486832980505138)): np.array(
			[1.6791940091598878, 1.6551261410697435, 1.409794162790941,
			 1.9741677713303347, 2.0597874597445314, 2.0622462140654476,
			 1.7363223595691983], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.0)): np.array(
			[2.438163, 1.6280129999999997, 1.063143, 2.920013999999999,
			 2.493126, 2.55085, 2.2170749999999995], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.31622776601683794)): np.array(
			[2.3442017456281237, 1.5640605307262445, 1.1828157667344907,
			 2.625720251672213, 2.332023277079511, 2.3847463468847243,
			 1.9386834821200956], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.6324555320336759)): np.array(
			[1.614062101060035, 1.8803070615052946, 1.5178898314821476,
			 2.1040523926857233, 2.119542761485414, 1.9052859285773094,
			 1.8384793466996574], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.9486832980505138)): np.array(
			[1.6170804650313024, 1.6155916932951755, 1.6784278120325267,
			 1.9082630470023074, 1.8983233241015547, 1.8651888488621493,
			 1.457320090895408], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.0)): np.array(
			[2.2360281300588385, 1.6788718073924933, 1.0789947002413987,
			 2.906168428760107, 2.42830789101213, 2.483554174105015,
			 2.153714286132849], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.31622776601683794)): np.array(
			[2.3280385629501437, 1.5612863230842646, 1.108969103541766,
			 2.7704832382227953, 2.383645770077282, 2.420604396934409,
			 2.3162606727073407], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.6324555320336759)): np.array(
			[1.787469884463895, 1.6192561915838644, 1.35155140591993,
			 2.0541420920621127, 1.7317323250118462, 2.2958339392836,
			 1.9092571594383188], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.9486832980505138)): np.array(
			[1.9498228715849697, 1.529586312626312, 1.4990427013545036,
			 2.028973238723339, 2.0411246783070687, 2.0690925769948403,
			 1.5820471786360304], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.0)): np.array(
			[2.438163, 1.6280129999999997, 1.063143, 2.920013999999999,
			 2.493126, 2.55085, 2.2170749999999995], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.31622776601683794)): np.array(
			[2.332010570456065, 1.56794964268415, 1.112160646016324,
			 2.7807802509640847, 2.3617341853068674, 2.6354754632859643,
			 2.1464853005473183], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.6324555320336759)): np.array(
			[1.94984811235547, 1.4860590438746994, 1.451361402334565,
			 2.1747856283515006, 1.7320772622944434, 1.76921623008529,
			 1.7216026551692132], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.9486832980505138)): np.array(
			[1.277354022004128, 1.0521793430849224, 1.1592929166326136,
			 1.966170194858422, 1.6955818873877782, 1.4461911076961123,
			 1.155175575608491], dtype=object
		)}
	data_cube = {
		(np.float64(0.0), np.float64(0.0)): np.array(
			[1.6636701707629264, 1.4464489284901267, 1.374740180572194,
			 1.8637372350522987, 1.7888125204507364, 1.8478409877273094,
			 1.9391882668026117], dtype=object
		),
		(np.float64(0.0), np.float64(0.31622776601683794)): np.array(
			[1.7498097849026197, 1.5915469738701544, 1.4502683283649271,
			 1.928656749449947, 1.8555519168428032, 1.8709919986241363,
			 1.7603210883461182], dtype=object
		),
		(np.float64(0.0), np.float64(0.6324555320336759)): np.array(
			[1.7404827943096328, 1.5182485854791843, 1.4596508435092217,
			 1.9711938862317664, 2.0807288807061575, 1.888258160651747,
			 1.9726000066158051], dtype=object
		),
		(np.float64(0.0), np.float64(0.9486832980505138)): np.array(
			[1.8282227568430938, 1.5966789660965208, 1.5125406455673698,
			 1.7701143055775237, 2.0390996611963472, 1.839706484918862,
			 1.8598050523458507], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.0)): np.array(
			[1.61385280324319, 1.3579014947556474, 1.1512979851043839,
			 1.5634186841555788, 1.8290683147628901, 1.6165532171004338,
			 1.7076429128903374], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.31622776601683794)): np.array(
			[1.7300691149710992, 1.6127895668961245, 1.4737536887707008,
			 1.9872977696528802, 1.8535389090711365, 1.979613953534805,
			 1.8907619940010545], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.6324555320336759)): np.array(
			[1.670409491545108, 1.6720362516808345, 1.5836197751954149,
			 1.7806676082061292, 1.6771528000827782, 2.0039007068006396,
			 1.850365567094269], dtype=object
		),
		(np.float64(0.31622776601683794), np.float64(0.9486832980505138)): np.array(
			[1.5458405303664569, 1.6587504780076001, 1.533038049909125,
			 1.5722197648618337, 1.6563469220498177, 1.7812371634862307,
			 1.6856712488344645], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.0)): np.array(
			[1.377263726144713, 1.3908730433187635, 1.0780784000468704,
			 1.6788235863032772, 1.7532923353852916, 1.7568884784192147,
			 1.535996414437201], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.31622776601683794)): np.array(
			[1.7460564005077928, 1.62128023696228, 1.2571697222011091,
			 2.247740616766524, 2.100390165348163, 2.2763640470305972,
			 1.859343690663204], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.6324555320336759)): np.array(
			[1.7258202256579596, 1.5661276436450133, 1.4353463595133247,
			 1.8543465717154086, 1.6476098088256559, 1.8076720280288268,
			 1.8854226604069708], dtype=object
		),
		(np.float64(0.6324555320336759), np.float64(0.9486832980505138)): np.array(
			[1.6029129294106121, 1.6110977273920737, 1.439681622345851,
			 1.8001118269238934, 1.7630163974504778, 1.883604092814131,
			 1.741563282693653], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.0)): np.array(
			[1.3754146407838863, 1.1870080481436316, 0.9728652663371796,
			 1.320706101165988, 1.6587572074367434, 1.6009877237717356,
			 1.4032986849639737], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.31622776601683794)): np.array(
			[1.85543271331652, 1.5178047131573058, 1.3249738713841144,
			 2.101573427339925, 1.966541937614957, 2.001355050786324,
			 1.9341580229831705], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.6324555320336759)): np.array(
			[1.6592980410428688, 1.6084480023127423, 1.340835074073076,
			 2.033959355307621, 1.8256191628509448, 2.0799367995283,
			 1.968240606763039], dtype=object
		),
		(np.float64(0.9486832980505138), np.float64(0.9486832980505138)): np.array(
			[1.194157164182027, 1.1694547550031322, 0.7528383089788109,
			 1.9417044106916541, 1.6010984016669636, 1.6887551625485346,
			 1.382668884832762], dtype=object
		)}
	data_nothing={(np.float64(0.0), np.float64(0.0)): np.array([1.4936984075497592, 1.434985308223041, 1.4317713105674215,
       1.9433184004994446, 1.8049791599117557, 1.9348344321014805,
       1.6722288456944043], dtype=object), (np.float64(0.0), np.float64(0.31622776601683794)): np.array([1.6748908185702813, 1.6486595851534678, 1.576594203780628,
       1.7935416763145517, 1.7265626755221912, 1.707535044639723,
       1.8558198733518323], dtype=object), (np.float64(0.0), np.float64(0.6324555320336759)): np.array([1.8215549483081965, 1.59345384802857, 1.5010980735158337,
       1.8521931368675317, 1.8964932545969313, 1.8519559039951277,
       1.675556288666875], dtype=object), (np.float64(0.0), np.float64(0.9486832980505138)): np.array([1.6531521065756498, 1.5334148890757455, 1.4720547225294052,
       1.7264707838072884, 1.7023640003407796, 2.0575313904979855,
       1.697242157178244], dtype=object), (np.float64(0.31622776601683794), np.float64(0.0)): np.array([1.7412703092161907, 1.4593390346284303, 1.2420449643129579,
       1.968335931402549, 1.6953463225119412, 2.022914306838155,
       1.8256080586736587], dtype=object), (np.float64(0.31622776601683794), np.float64(0.31622776601683794)): np.array([1.8260741831117644, 1.6022059117401415, 1.405654970540861,
       2.0750872571875227, 2.1101280495468275, 1.7031896623930363,
       1.6251564391838256], dtype=object), (np.float64(0.31622776601683794), np.float64(0.6324555320336759)): np.array([1.7761655434585897, 1.5919730219662296, 1.3525875366667675,
       1.7095340498270577, 1.7436477851677523, 2.0616583089574405,
       1.6887036042318044], dtype=object), (np.float64(0.31622776601683794), np.float64(0.9486832980505138)): np.array([1.6985625500778339, 1.4954436148156292, 1.4678526084697285,
       1.726967476886534, 1.7262569198653934, 2.057808472127178,
       1.9951627852484515], dtype=object), (np.float64(0.6324555320336759), np.float64(0.0)): np.array([1.8395874848724272, 1.403134806314735, 1.1879312041740135,
       2.0115063527374093, 1.922781707805853, 1.9654920852475206,
       1.8867065268740564], dtype=object), (np.float64(0.6324555320336759), np.float64(0.31622776601683794)): np.array([1.7233577071650559, 1.628313062163691, 1.461358440913231,
       1.963951054865355, 1.9654325105873562, 1.748775333404987,
       1.9548311629889081], dtype=object), (np.float64(0.6324555320336759), np.float64(0.6324555320336759)): np.array([1.869761974757433, 1.540864957976488, 1.3660644663808736,
       1.9508060918382695, 1.7604727070486472, 1.7128146802037343,
       1.7082052864553776], dtype=object), (np.float64(0.6324555320336759), np.float64(0.9486832980505138)): np.array([1.5869998175508309, 1.6250367617880066, 1.451518180324829,
       1.652471514296956, 1.9049248096781737, 1.6021286785674722,
       1.8937217994901339], dtype=object), (np.float64(0.9486832980505138), np.float64(0.0)): np.array([1.4749993195033788, 1.4807966813435798, 1.2675357962957103,
       1.5095440723443108, 1.5309477347442482, 1.6117709791766024,
       1.4150840755744645], dtype=object), (np.float64(0.9486832980505138), np.float64(0.31622776601683794)): np.array([1.5453249249824559, 1.5542363667934982, 1.365704104838589,
       1.9450142883622976, 1.8886791806915735, 2.0186947986571706,
       1.6457768732040579], dtype=object), (np.float64(0.9486832980505138), np.float64(0.6324555320336759)): np.array([1.6116909070072334, 1.5558931551194066, 1.4328077287885774,
       1.8094709749288078, 2.068050124108535, 1.9181812792007986,
       1.616424506904865], dtype=object), (np.float64(0.9486832980505138), np.float64(0.9486832980505138)): np.array([1.1936617382831387, 1.037537020289225, 0.7662522809433546,
       1.8267454653138329, 1.389811421249876, 1.6749035527563452,
       1.4681041374379826], dtype=object)}

	new_dict = dict()
	xs = set()
	ys = set()
	for d in data_cube:
		# is positive if and only if sphere gives better result than nothing
		new_dict[d] = compare_results(data_cube[d], data_nothing[d])[1:]
		xs.add(d[0])
		ys.add(d[1])
	xs = np.array(sorted(xs))
	ys = np.array(sorted(ys))

	print(xs, ys)
	plt.clf()
	data = list(new_dict.items())
	height = data.copy()
	colors = data.copy()
	for i, e in enumerate(data):
		height[i] = e[1][0]
		colors[i] = e[1][1]
	mih = min(height)
	mah = max(height)
	height = np.reshape(np.array(height), (len(xs), len(ys)))

	colors = np.reshape(np.array(colors), (len(xs), len(ys)))
	print(f"Height Matrix:\n{height}\nSTD:\n{colors}")
	contourplot = plt.contourf(xs, ys, height, 100, cmap=plt.cm.bone)

	# fig, ax = plt.subplots(1, 1, subplot_kw={'projection': '3d'})
	# ax.set_ylim(mih - 1e2, mah + 1e-2)
	# surf = ax.plot_surface(x2, y2, height, facecolors=cstm_autumn_r(colors), cmap=plt.cm.autumn_r)
	# fig.colorbar(surf, shrink=0.5, aspect=5)

	# Add formalisation to report: Processus clair, modélisation claire, expliquer le but des tests et pourquoi ça
	# n'a pas pu aboutir
	cbar = plt.colorbar(contourplot)
	plt.title("Mean of Difference of Quality between Cube and Nothing\n($>0$ if cube is greater)")
	plt.savefig("../../Figures/qual_diff_cube_none.pdf")
